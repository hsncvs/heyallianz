{"version":3,"sources":["components/search/search--block.scss","components/search/search--block.css","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AASA;EACE,wCAAiD;EACjD,aAAa;EACb,yBAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,eAAe;EACf,OAAO;EACP,QAAQ;EACR,MAAM;EACN,SAAS;EACT,aAAa;ACRf;;ADDA;EAWI,oBAAa;EAAb,oBAAa;EAAb,aAAa;ACNjB;;ADLA;EAcI,uBAAuB;EACvB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,WAAW;EACX,eAAe;EACf,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,eAAe;ACLnB;;ADlBA;EAyBM,WAAW;ACHjB;;ADYA;EACE,UAAU;EACV,oBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,yBAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,YAAY;ACTd;;ADKA;EAMI,YAAY;EACZ,gBAAgB;ACPpB;;ADAA;EAUI,aAAa;ACNjB;;ADJA;EAaI,WAAW;EACX,kBAAkB;ACLtB;;ADTA;EAgBM,mEAAmE;EACnE,cAAc;EACd,gBAAgB;EAChB,gBAAgB;ACHtB;;ADhBA;EAuBI,uBAAuB;EACvB,6BAA6B;EAC7B,WAAW;EACX,mBAAmB;EACnB,WAAW;EACX,eAAe;EACf,iBAAiB;EACjB,kBAAkB;ACHtB;;ACVI;EFjBJ;IAgCM,eAAe;ECAnB;AACF;;ADjCA;EAmCM,WAAW;ACEjB;;ADrCA;EAmCM,WAAW;ACEjB;;ADrCA;EAmCM,WAAW;ACEjB;;ADrCA;EAmCM,WAAW;ACEjB;;ADrCA;EAmCM,WAAW;ACEjB","file":"search--block.css","sourcesContent":["//\n// Dependencies\n//\n@import \"./../../dependencies\";\n\n\n//\n// Block Wrapper\n//\n.search-block-wrapper {\n  background-color: rgba(darken($gray-blue-900, 4%), .98);\n  display: none;\n  align-items: center;\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  z-index: 1000;\n  &.active {\n    display: flex;\n  }\n  .close-block-modal {\n    background: transparent;\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    color: #FFF;\n    font-size: 1rem;\n    position: absolute;\n    top: 10%;\n    right: 10%;\n    cursor: pointer;\n    &:hover {\n      opacity: .7;\n    }\n  }\n}\n\n\n//\n// Search Form\n//\n.search-block-wrapper form {\n  width: 80%;\n  display: flex;\n  align-items: center;\n  margin: auto;\n  input {\n    border: none;\n    border-radius: 0;\n  }\n  input[type=\"submit\"] {\n    display: none;\n  }\n  .form-type-search {\n    width: 100%;\n    text-align: center;\n    &:after {\n      content: 'Enter the keyword you wish to search for and press Enter';\n      display: block;\n      margin-top: 1rem;\n      color: #FFFFFF70;\n    }\n  }\n  input[type=\"search\"] {\n    background: transparent;\n    border-bottom: 3px solid #FFF;\n    width: 100%;\n    padding: .5rem 1rem;\n    color: #FFF;\n    font-size: 2rem;\n    font-weight: bold;\n    text-align: center;\n    @include media-breakpoint-up(lg) {\n      font-size: 3rem;\n    }\n    &::placeholder{\n      color: #FFF;\n    }\n  }\n}\n",".search-block-wrapper {\n  background-color: rgba(30, 39, 44, 0.98);\n  display: none;\n  align-items: center;\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  z-index: 1000;\n}\n\n.search-block-wrapper.active {\n  display: flex;\n}\n\n.search-block-wrapper .close-block-modal {\n  background: transparent;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  color: #FFF;\n  font-size: 1rem;\n  position: absolute;\n  top: 10%;\n  right: 10%;\n  cursor: pointer;\n}\n\n.search-block-wrapper .close-block-modal:hover {\n  opacity: .7;\n}\n\n.search-block-wrapper form {\n  width: 80%;\n  display: flex;\n  align-items: center;\n  margin: auto;\n}\n\n.search-block-wrapper form input {\n  border: none;\n  border-radius: 0;\n}\n\n.search-block-wrapper form input[type=\"submit\"] {\n  display: none;\n}\n\n.search-block-wrapper form .form-type-search {\n  width: 100%;\n  text-align: center;\n}\n\n.search-block-wrapper form .form-type-search:after {\n  content: 'Enter the keyword you wish to search for and press Enter';\n  display: block;\n  margin-top: 1rem;\n  color: #FFFFFF70;\n}\n\n.search-block-wrapper form input[type=\"search\"] {\n  background: transparent;\n  border-bottom: 3px solid #FFF;\n  width: 100%;\n  padding: .5rem 1rem;\n  color: #FFF;\n  font-size: 2rem;\n  font-weight: bold;\n  text-align: center;\n}\n\n@media (min-width: 992px) {\n  .search-block-wrapper form input[type=\"search\"] {\n    font-size: 3rem;\n  }\n}\n\n.search-block-wrapper form input[type=\"search\"]::placeholder {\n  color: #FFF;\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}