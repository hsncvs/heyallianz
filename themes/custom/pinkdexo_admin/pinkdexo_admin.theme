<?php

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_HOOK()
 */
function pinkdexo_admin_preprocess_paragraph(&$variables) {
}


/**
 * Implements hook_form_taxonomy_term_form_alter().
 */
function pinkdexo_admin_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  if ($form_state->getFormObject() instanceof EntityFormInterface) {
    $entity = $form_state->getFormObject()->getEntity();
    if ($entity instanceof FieldableEntityInterface) {
      foreach ($entity->getFieldDefinitions() as $definition) {
        $field_name = $definition->getName();
        $component = $form_state->getStorage()['form_display']->getComponent($field_name);

        if (!empty($component['type']) && in_array($component['type'], ['paragraphs'])) {
          foreach (Element::children($form[$field_name]['widget']) as $i) {
            if (is_numeric($i)) {
              _pinkdexo_admin_paragraph($form[$field_name]['widget'][$i]);
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function for styling paragraphs
 * @param array $paragraph
 */
function _pinkdexo_admin_paragraph(array &$paragraph) {
  // Add a paragraph item wrapper class.
  $paragraph['#attributes']['class'][] = 'paragraph-form-item';

  // Add modifier classes.
  if (isset($paragraph['preview'])) {
    $paragraph['#attributes']['class'][] = 'paragraph-form-item--preview';
  }
  elseif (isset($paragraph['subform'])) {
    $paragraph['#attributes']['class'][] = 'paragraph-form-item--subform';
  }
}
